/* tslint:disable */
/* eslint-disable */
/**
 * Stream Video API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v89.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIError,
  CreateCallTypeRequest,
  CreateCallTypeResponse,
  GetCallTypeResponse,
  ListCallTypeResponse,
  Response,
  UpdateCallTypeRequest,
  UpdateCallTypeResponse,
} from '../models';

export interface CreateCallTypeOperationRequest {
    createCallTypeRequest: CreateCallTypeRequest | null;
}

export interface DeleteCallTypeRequest {
    name: string;
}

export interface GetCallTypeRequest {
    name: string;
}

export interface UpdateCallTypeOperationRequest {
    name: string;
    updateCallTypeRequest: UpdateCallTypeRequest | null;
}

/**
 * 
 */
export class ServerSideApi extends runtime.BaseAPI {

    /**
     *  
     * Create Call Type
     */
    async createCallTypeRaw(requestParameters: CreateCallTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCallTypeResponse>> {
        if (requestParameters.createCallTypeRequest === null || requestParameters.createCallTypeRequest === undefined) {
            throw new runtime.RequiredError('createCallTypeRequest','Required parameter requestParameters.createCallTypeRequest was null or undefined when calling createCallType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Stream-Auth-Type"] = this.configuration.apiKey("Stream-Auth-Type"); // stream-auth-type authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/calltypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createCallTypeRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     *  
     * Create Call Type
     */
    async createCallType(requestParameters: CreateCallTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCallTypeResponse> {
        const response = await this.createCallTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  
     * Delete Call Type
     */
    async deleteCallTypeRaw(requestParameters: DeleteCallTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteCallType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Stream-Auth-Type"] = this.configuration.apiKey("Stream-Auth-Type"); // stream-auth-type authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/calltypes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     *  
     * Delete Call Type
     */
    async deleteCallType(requestParameters: DeleteCallTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response> {
        const response = await this.deleteCallTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  
     * Get Call Type
     */
    async getCallTypeRaw(requestParameters: GetCallTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCallTypeResponse>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getCallType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Stream-Auth-Type"] = this.configuration.apiKey("Stream-Auth-Type"); // stream-auth-type authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/calltypes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     *  
     * Get Call Type
     */
    async getCallType(requestParameters: GetCallTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCallTypeResponse> {
        const response = await this.getCallTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  
     * List Call Type
     */
    async listCallTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListCallTypeResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Stream-Auth-Type"] = this.configuration.apiKey("Stream-Auth-Type"); // stream-auth-type authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/calltypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     *  
     * List Call Type
     */
    async listCallTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListCallTypeResponse> {
        const response = await this.listCallTypesRaw(initOverrides);
        return await response.value();
    }

    /**
     *  
     * Update Call Type
     */
    async updateCallTypeRaw(requestParameters: UpdateCallTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateCallTypeResponse>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling updateCallType.');
        }

        if (requestParameters.updateCallTypeRequest === null || requestParameters.updateCallTypeRequest === undefined) {
            throw new runtime.RequiredError('updateCallTypeRequest','Required parameter requestParameters.updateCallTypeRequest was null or undefined when calling updateCallType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Stream-Auth-Type"] = this.configuration.apiKey("Stream-Auth-Type"); // stream-auth-type authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/calltypes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updateCallTypeRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     *  
     * Update Call Type
     */
    async updateCallType(requestParameters: UpdateCallTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateCallTypeResponse> {
        const response = await this.updateCallTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
