/* tslint:disable */
/* eslint-disable */
/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v84.1.1-3-g76840f817
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIError,
  CreateCampaignRequest,
  CreateCampaignResponse,
  CreateSegmentRequest,
  CreateSegmentResponse,
  DeleteCampaignResponse,
  DeleteSegmentResponse,
  QueryCampaignsRequest,
  QueryCampaignsResponse,
  QueryRecipientsRequest,
  QueryRecipientsResponse,
  QuerySegmentsRequest,
  QuerySegmentsResponse,
  ResumeCampaignResponse,
  ScheduleCampaignRequest,
  ScheduleCampaignResponse,
  StopCampaignResponse,
  TestCampaignRequest,
  TestCampaignResponse,
  UpdateCampaignRequest,
  UpdateCampaignResponse,
  UpdateSegmentRequest,
  UpdateSegmentResponse,
} from '../models';

export interface CreateCampaignOperationRequest {
    createCampaignRequest: CreateCampaignRequest | null;
}

export interface CreateSegmentOperationRequest {
    createSegmentRequest: CreateSegmentRequest | null;
}

export interface DeleteCampaignRequest {
    id: string;
    recipients?: boolean;
}

export interface DeleteSegmentRequest {
    id: string;
}

export interface QueryCampaignsOperationRequest {
    payload?: QueryCampaignsRequest;
}

export interface QueryRecipientsOperationRequest {
    payload?: QueryRecipientsRequest;
}

export interface QuerySegmentsOperationRequest {
    payload?: QuerySegmentsRequest;
}

export interface ResumeCampaignRequest {
    id: string;
}

export interface ScheduleCampaignOperationRequest {
    id: string;
    scheduleCampaignRequest: ScheduleCampaignRequest | null;
}

export interface StopCampaignRequest {
    id: string;
}

export interface TestCampaignOperationRequest {
    id: string;
    testCampaignRequest: TestCampaignRequest | null;
}

export interface UpdateCampaignOperationRequest {
    id: string;
    updateCampaignRequest: UpdateCampaignRequest | null;
}

export interface UpdateSegmentOperationRequest {
    id: string;
    updateSegmentRequest: UpdateSegmentRequest | null;
}

/**
 * 
 */
export class CampaignsApi extends runtime.BaseAPI {

    /**
     * Creates a new campaign 
     * Create campaign
     */
    async createCampaignRaw(requestParameters: CreateCampaignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCampaignResponse>> {
        if (requestParameters.createCampaignRequest === null || requestParameters.createCampaignRequest === undefined) {
            throw new runtime.RequiredError('createCampaignRequest','Required parameter requestParameters.createCampaignRequest was null or undefined when calling createCampaign.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Stream-Auth-Type"] = this.configuration.apiKey("Stream-Auth-Type"); // stream-auth-type authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/campaigns`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createCampaignRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new campaign 
     * Create campaign
     */
    async createCampaign(requestParameters: CreateCampaignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCampaignResponse> {
        const response = await this.createCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a segment 
     * Create segment
     */
    async createSegmentRaw(requestParameters: CreateSegmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSegmentResponse>> {
        if (requestParameters.createSegmentRequest === null || requestParameters.createSegmentRequest === undefined) {
            throw new runtime.RequiredError('createSegmentRequest','Required parameter requestParameters.createSegmentRequest was null or undefined when calling createSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Stream-Auth-Type"] = this.configuration.apiKey("Stream-Auth-Type"); // stream-auth-type authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/segments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createSegmentRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a segment 
     * Create segment
     */
    async createSegment(requestParameters: CreateSegmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSegmentResponse> {
        const response = await this.createSegmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a campaign 
     * Delete campaign
     */
    async deleteCampaignRaw(requestParameters: DeleteCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteCampaignResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCampaign.');
        }

        const queryParameters: any = {};

        if (requestParameters.recipients !== undefined) {
            queryParameters['recipients'] = requestParameters.recipients;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Stream-Auth-Type"] = this.configuration.apiKey("Stream-Auth-Type"); // stream-auth-type authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/campaigns/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Delete a campaign 
     * Delete campaign
     */
    async deleteCampaign(requestParameters: DeleteCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteCampaignResponse> {
        const response = await this.deleteCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a segment 
     * Delete segment
     */
    async deleteSegmentRaw(requestParameters: DeleteSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteSegmentResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Stream-Auth-Type"] = this.configuration.apiKey("Stream-Auth-Type"); // stream-auth-type authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/segments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Delete a segment 
     * Delete segment
     */
    async deleteSegment(requestParameters: DeleteSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteSegmentResponse> {
        const response = await this.deleteSegmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query campaigns 
     * Query campaigns
     */
    async queryCampaignsRaw(requestParameters: QueryCampaignsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryCampaignsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.payload !== undefined) {
            queryParameters['payload'] = requestParameters.payload;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Stream-Auth-Type"] = this.configuration.apiKey("Stream-Auth-Type"); // stream-auth-type authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/campaigns`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Query campaigns 
     * Query campaigns
     */
    async queryCampaigns(requestParameters: QueryCampaignsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryCampaignsResponse> {
        const response = await this.queryCampaignsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query recipients 
     * Query recipients
     */
    async queryRecipientsRaw(requestParameters: QueryRecipientsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryRecipientsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.payload !== undefined) {
            queryParameters['payload'] = requestParameters.payload;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Stream-Auth-Type"] = this.configuration.apiKey("Stream-Auth-Type"); // stream-auth-type authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/recipients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Query recipients 
     * Query recipients
     */
    async queryRecipients(requestParameters: QueryRecipientsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryRecipientsResponse> {
        const response = await this.queryRecipientsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query segments 
     * Query segments
     */
    async querySegmentsRaw(requestParameters: QuerySegmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuerySegmentsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.payload !== undefined) {
            queryParameters['payload'] = requestParameters.payload;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Stream-Auth-Type"] = this.configuration.apiKey("Stream-Auth-Type"); // stream-auth-type authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/segments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Query segments 
     * Query segments
     */
    async querySegments(requestParameters: QuerySegmentsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuerySegmentsResponse> {
        const response = await this.querySegmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resume a stopped campaign 
     * Resume campaign
     */
    async resumeCampaignRaw(requestParameters: ResumeCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResumeCampaignResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling resumeCampaign.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Stream-Auth-Type"] = this.configuration.apiKey("Stream-Auth-Type"); // stream-auth-type authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/campaigns/{id}/resume`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Resume a stopped campaign 
     * Resume campaign
     */
    async resumeCampaign(requestParameters: ResumeCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResumeCampaignResponse> {
        const response = await this.resumeCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Schedule a campaign 
     * Schedule campaign
     */
    async scheduleCampaignRaw(requestParameters: ScheduleCampaignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduleCampaignResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling scheduleCampaign.');
        }

        if (requestParameters.scheduleCampaignRequest === null || requestParameters.scheduleCampaignRequest === undefined) {
            throw new runtime.RequiredError('scheduleCampaignRequest','Required parameter requestParameters.scheduleCampaignRequest was null or undefined when calling scheduleCampaign.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Stream-Auth-Type"] = this.configuration.apiKey("Stream-Auth-Type"); // stream-auth-type authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/campaigns/{id}/schedule`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.scheduleCampaignRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Schedule a campaign 
     * Schedule campaign
     */
    async scheduleCampaign(requestParameters: ScheduleCampaignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduleCampaignResponse> {
        const response = await this.scheduleCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stop a running campaign 
     * Stop campaign
     */
    async stopCampaignRaw(requestParameters: StopCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StopCampaignResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling stopCampaign.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Stream-Auth-Type"] = this.configuration.apiKey("Stream-Auth-Type"); // stream-auth-type authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/campaigns/{id}/stop`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Stop a running campaign 
     * Stop campaign
     */
    async stopCampaign(requestParameters: StopCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StopCampaignResponse> {
        const response = await this.stopCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test a campaign 
     * Test campaign
     */
    async testCampaignRaw(requestParameters: TestCampaignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestCampaignResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling testCampaign.');
        }

        if (requestParameters.testCampaignRequest === null || requestParameters.testCampaignRequest === undefined) {
            throw new runtime.RequiredError('testCampaignRequest','Required parameter requestParameters.testCampaignRequest was null or undefined when calling testCampaign.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Stream-Auth-Type"] = this.configuration.apiKey("Stream-Auth-Type"); // stream-auth-type authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/campaigns/{id}/test`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.testCampaignRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Test a campaign 
     * Test campaign
     */
    async testCampaign(requestParameters: TestCampaignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestCampaignResponse> {
        const response = await this.testCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing campaign 
     * Update campaign
     */
    async updateCampaignRaw(requestParameters: UpdateCampaignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateCampaignResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCampaign.');
        }

        if (requestParameters.updateCampaignRequest === null || requestParameters.updateCampaignRequest === undefined) {
            throw new runtime.RequiredError('updateCampaignRequest','Required parameter requestParameters.updateCampaignRequest was null or undefined when calling updateCampaign.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Stream-Auth-Type"] = this.configuration.apiKey("Stream-Auth-Type"); // stream-auth-type authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/campaigns/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updateCampaignRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update an existing campaign 
     * Update campaign
     */
    async updateCampaign(requestParameters: UpdateCampaignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateCampaignResponse> {
        const response = await this.updateCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing segment 
     * Update segment
     */
    async updateSegmentRaw(requestParameters: UpdateSegmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateSegmentResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSegment.');
        }

        if (requestParameters.updateSegmentRequest === null || requestParameters.updateSegmentRequest === undefined) {
            throw new runtime.RequiredError('updateSegmentRequest','Required parameter requestParameters.updateSegmentRequest was null or undefined when calling updateSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Stream-Auth-Type"] = this.configuration.apiKey("Stream-Auth-Type"); // stream-auth-type authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/segments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updateSegmentRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update an existing segment 
     * Update segment
     */
    async updateSegment(requestParameters: UpdateSegmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateSegmentResponse> {
        const response = await this.updateSegmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
